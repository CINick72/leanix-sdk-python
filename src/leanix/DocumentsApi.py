#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class DocumentsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def getDocuments(self, **kwargs):
        """Read all documents

        Args:
            relations, bool: If set to true, all relations of the Fact Sheet are fetched as well. Fetching all relations can be slower. Default: false. (optional)

            filter, str: Full-text filter (optional)

            

        Returns: Array[Document]
        """

        allParams = ['relations', 'filter']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getDocuments" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/documents'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('relations' in params):
            queryParams['relations'] = self.apiClient.toPathValue(params['relations'])
        if ('filter' in params):
            queryParams['filter'] = self.apiClient.toPathValue(params['filter'])
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Document]')
        return responseObject
        

        

    def createDocument(self, **kwargs):
        """Create a new Document

        Args:
            body, Document: Message-Body (optional)

            

        Returns: Document
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/documents'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Document')
        return responseObject
        

        

    def getDocument(self, ID, **kwargs):
        """Read a Document by a given ID

        Args:
            ID, str: Unique ID (required)

            relations, bool: If set to true, all relations of the Fact Sheet are fetched as well. Fetching all relations can be slower. Default: false. (optional)

            

        Returns: Document
        """

        allParams = ['ID', 'relations']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/documents/{ID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('relations' in params):
            queryParams['relations'] = self.apiClient.toPathValue(params['relations'])
        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Document')
        return responseObject
        

        

    def updateDocument(self, ID, **kwargs):
        """Update a Document by a given ID

        Args:
            ID, str: Unique ID (required)

            body, Document: Message-Body (optional)

            

        Returns: Document
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/documents/{ID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Document')
        return responseObject
        

        

    def deleteDocument(self, ID, **kwargs):
        """Delete a Document by a given ID

        Args:
            ID, str: Unique ID (required)

            

        Returns: 
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/documents/{ID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    





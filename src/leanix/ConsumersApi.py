#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class ConsumersApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def getConsumers(self, **kwargs):
        """Read all User Group

        Args:
            relations, bool: If set to true, all relations of the Fact Sheet are fetched as well. Fetching all relations can be slower. Default: false. (optional)

            filter, str: Full-text filter (optional)

            

        Returns: Array[Consumer]
        """

        allParams = ['relations', 'filter']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getConsumers" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('relations' in params):
            queryParams['relations'] = self.apiClient.toPathValue(params['relations'])
        if ('filter' in params):
            queryParams['filter'] = self.apiClient.toPathValue(params['filter'])
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Consumer]')
        return responseObject
        

        

    def createConsumer(self, **kwargs):
        """Create a new User Group

        Args:
            body, Consumer: Message-Body (optional)

            

        Returns: Consumer
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Consumer')
        return responseObject
        

        

    def getConsumer(self, ID, **kwargs):
        """Read a User Group by a given ID

        Args:
            ID, str: Unique ID (required)

            relations, bool: If set to true, all relations of the Fact Sheet are fetched as well. Fetching all relations can be slower. Default: false. (optional)

            

        Returns: Consumer
        """

        allParams = ['ID', 'relations']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('relations' in params):
            queryParams['relations'] = self.apiClient.toPathValue(params['relations'])
        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Consumer')
        return responseObject
        

        

    def updateConsumer(self, ID, **kwargs):
        """Update a User Group by a given ID

        Args:
            ID, str: Unique ID (required)

            body, Consumer: Message-Body (optional)

            

        Returns: Consumer
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Consumer')
        return responseObject
        

        

    def deleteConsumer(self, ID, **kwargs):
        """Delete a User Group by a given ID

        Args:
            ID, str: Unique ID (required)

            

        Returns: 
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasLifecycles(self, ID, **kwargs):
        """Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasLifecycle]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasLifecycles" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasLifecycles'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasLifecycle]')
        return responseObject
        

        

    def createFactSheetHasLifecycle(self, ID, **kwargs):
        """Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasLifecycle: Message-Body (optional)

            

        Returns: FactSheetHasLifecycle
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasLifecycle" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasLifecycles'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasLifecycle')
        return responseObject
        

        

    def getFactSheetHasLifecycle(self, ID, relationID, **kwargs):
        """Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasLifecycle
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasLifecycle" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasLifecycles/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasLifecycle')
        return responseObject
        

        

    def updateFactSheetHasLifecycle(self, ID, relationID, **kwargs):
        """Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasLifecycle: Message-Body (optional)

            

        Returns: FactSheetHasLifecycle
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasLifecycle" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasLifecycles/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasLifecycle')
        return responseObject
        

        

    def deleteFactSheetHasLifecycle(self, ID, relationID, **kwargs):
        """Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasLifecycle" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasLifecycles/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasParents(self, ID, **kwargs):
        """Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasParent]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasParents" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasParents'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasParent]')
        return responseObject
        

        

    def createFactSheetHasParent(self, ID, **kwargs):
        """Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasParent: Message-Body (optional)

            

        Returns: FactSheetHasParent
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasParent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasParents'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasParent')
        return responseObject
        

        

    def getFactSheetHasParent(self, ID, relationID, **kwargs):
        """Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasParent
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasParent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasParents/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasParent')
        return responseObject
        

        

    def updateFactSheetHasParent(self, ID, relationID, **kwargs):
        """Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasParent: Message-Body (optional)

            

        Returns: FactSheetHasParent
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasParent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasParents/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasParent')
        return responseObject
        

        

    def deleteFactSheetHasParent(self, ID, relationID, **kwargs):
        """Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasParent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasParents/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasChildren(self, ID, **kwargs):
        """Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasChild]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasChildren" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasChildren'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasChild]')
        return responseObject
        

        

    def createFactSheetHasChild(self, ID, **kwargs):
        """Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasChild: Message-Body (optional)

            

        Returns: FactSheetHasChild
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasChild" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasChildren'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasChild')
        return responseObject
        

        

    def getFactSheetHasChild(self, ID, relationID, **kwargs):
        """Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasChild
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasChild" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasChildren/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasChild')
        return responseObject
        

        

    def updateFactSheetHasChild(self, ID, relationID, **kwargs):
        """Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasChild: Message-Body (optional)

            

        Returns: FactSheetHasChild
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasChild" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasChildren/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasChild')
        return responseObject
        

        

    def deleteFactSheetHasChild(self, ID, relationID, **kwargs):
        """Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasChild" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasChildren/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getServiceHasConsumers(self, ID, **kwargs):
        """Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[ServiceHasConsumer]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasConsumers" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/serviceHasConsumers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[ServiceHasConsumer]')
        return responseObject
        

        

    def createServiceHasConsumer(self, ID, **kwargs):
        """Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, ServiceHasConsumer: Message-Body (optional)

            

        Returns: ServiceHasConsumer
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createServiceHasConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/serviceHasConsumers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasConsumer')
        return responseObject
        

        

    def getServiceHasConsumer(self, ID, relationID, **kwargs):
        """Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: ServiceHasConsumer
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/serviceHasConsumers/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasConsumer')
        return responseObject
        

        

    def updateServiceHasConsumer(self, ID, relationID, **kwargs):
        """Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, ServiceHasConsumer: Message-Body (optional)

            

        Returns: ServiceHasConsumer
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateServiceHasConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/serviceHasConsumers/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasConsumer')
        return responseObject
        

        

    def deleteServiceHasConsumer(self, ID, relationID, **kwargs):
        """Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteServiceHasConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/serviceHasConsumers/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasDocuments(self, ID, **kwargs):
        """Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasDocument]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasDocuments" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasDocuments'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasDocument]')
        return responseObject
        

        

    def createFactSheetHasDocument(self, ID, **kwargs):
        """Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasDocument: Message-Body (optional)

            

        Returns: FactSheetHasDocument
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasDocuments'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasDocument')
        return responseObject
        

        

    def getFactSheetHasDocument(self, ID, relationID, **kwargs):
        """Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasDocument
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasDocuments/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasDocument')
        return responseObject
        

        

    def updateFactSheetHasDocument(self, ID, relationID, **kwargs):
        """Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasDocument: Message-Body (optional)

            

        Returns: FactSheetHasDocument
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasDocuments/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasDocument')
        return responseObject
        

        

    def deleteFactSheetHasDocument(self, ID, relationID, **kwargs):
        """Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/consumers/{ID}/factSheetHasDocuments/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    




